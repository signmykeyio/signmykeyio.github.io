<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Signmykey</title>
    <link>https://signmykey.io/</link>
    <description>Recent content on Signmykey</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://signmykey.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Authenticator</title>
      <link>https://signmykey.io/backends/authenticator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://signmykey.io/backends/authenticator/</guid>
      <description>Local Example Usage authenticatorType: local authenticatorOpts: users: foouser: $2a$10$zsvMZ7nEYo4jJJxgb5FpH.izPH37LsuLBXPbuKH4MPF4sihFSG6bW baruser: $2a$10$srGqC9g46xaRXbueLk5kDuSuDM6h2EpC.MTRiVaij6s/jcsKQ6LHu  Options  users - Map of users and bcrypt hashed passwords (you can hash passwords via &amp;ldquo;signmykey hash&amp;rdquo; command) (required)  LDAP Example Usage authenticatorType: ldap authenticatorOpts: ldapAddr: localhost ldapPort: 3893 ldapTLS: False ldapTLSVerify: False ldapBindUser: &amp;quot;cn=serviceuser,ou=svcaccts,dc=glauth,dc=com&amp;quot; ldapBindPassword: &amp;quot;mysecret&amp;quot; ldapBase: &amp;quot;dc=glauth,dc=com&amp;quot; ldapSearch: &amp;quot;(cn=%s)&amp;quot;  Options  ldapAddr - Address of LDAP server (required) ldapPort - Port of LDAP server ldapTLS - Enable/disable SSL/TLS connection ldapTLSVerify - Enable/disable verification of SSL/TLS certificate ldapBindUser - LDAP bind user ldapBindPassword - LDAP bind password ldapBase - LDAP search base ldapSearch - LDAP search string to find user  OIDC ROPC Example Usage authenticatorType: oidcropc authenticatorOpts: oidcTokenEndpoint: &amp;quot;https://idp.</description>
    </item>
    
    <item>
      <title>LDAP Server</title>
      <link>https://signmykey.io/howtos/ldapserver/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://signmykey.io/howtos/ldapserver/</guid>
      <description>This HOWTO describe how to configure an LDAP server using glauth.
Installation Download wget https://github.com/glauth/glauth/releases/download/v1.1.0/glauth64 -O /usr/local/bin/glauth chmod +x /usr/local/bin/glauth  User and directories useradd --no-create-home -s /bin/false glauth mkdir -m 700 /etc/glauth wget https://raw.githubusercontent.com/glauth/glauth/master/sample-simple.cfg -O /etc/glauth/glauth.cfg chown -R glauth: /etc/glauth/  Configuration The default configuration downloaded during the previous step contains some users.
Launch runuser -s /bin/bash -l glauth -c &#39;glauth -c /etc/glauth/glauth.cfg&#39;  Usage List LDAP entries</description>
    </item>
    
    <item>
      <title>OpenID Connect ROPC compliant server</title>
      <link>https://signmykey.io/howtos/oidcropc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://signmykey.io/howtos/oidcropc/</guid>
      <description>This HOWTO describe how to configure an OpenID Connect ROPC client using Keycloak.
Your Keycloak server must be already setup.
Create a new client in your Realm Using Admin web interface:
Important options:
 Client ID: signmykey (will be used in signmykey config file) Client Protocol: openid-connect  Client options Important options:
 Client ID: signmykey Access Type: confidential Direct Access Grants Enabled: ON (This enables ROPC grant flow)  Grab Client Secret Once you saved configuration with &amp;ldquo;Access Type: confidential&amp;rdquo;, you now have access to credentials.</description>
    </item>
    
    <item>
      <title>Principals</title>
      <link>https://signmykey.io/backends/principals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://signmykey.io/backends/principals/</guid>
      <description>Local Example Usage principalsType: local principalsOpts: users: foouser: fooprincpal,anotherprincipal,thirdprincipal baruser: anotherprincipal  Options  users - Map of users and associated principals (required)  LDAP Example Usage principalsType: ldap principalsOpts: ldapAddr: localhost ldapPort: 3893 ldapTLS: False ldapTLSVerify: False ldapBindUser: &amp;quot;cn=serviceuser,ou=svcaccts,dc=glauth,dc=com&amp;quot; ldapBindPassword: &amp;quot;mysecret&amp;quot; ldapUserBase: &amp;quot;dc=glauth,dc=com&amp;quot; ldapUserSearch: &amp;quot;(cn=%s)&amp;quot; ldapGroupBase: &amp;quot;dc=glauth,dc=com&amp;quot; ldapGroupSearch: &amp;quot;(&amp;amp;(objectClass=group)((member=%s)))&amp;quot;  Options  ldapAddr - Address of LDAP server (required) ldapPort - Port of LDAP server ldapTLS - Enable/disable SSL/TLS connection ldapTLSVerify - Enable/disable verification of SSL/TLS certificate ldapBindUser - LDAP bind user ldapBindPassword - LDAP bind password ldapUserBase - LDAP user search base ldapUserSearch - LDAP search string to find user ldapGroupBase - LDAP groups search base ldapGroupSearch - LDAP search string to find groups ldapGroupPrefix - Filter LDAP groups by prefix transformCase - Change case of returned principals (default: none) (must be &amp;ldquo;none&amp;rdquo;, &amp;ldquo;lower&amp;rdquo; or &amp;ldquo;upper&amp;rdquo;)  OIDC ROPC Example Usage principalsType: oidcropc principalsOpts: oidcUserinfoEndpoint: &amp;quot;https://idp.</description>
    </item>
    
    <item>
      <title>SSH Server</title>
      <link>https://signmykey.io/getting-started/sshserver/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://signmykey.io/getting-started/sshserver/</guid>
      <description>Configuration In order to use SSH principals, you must configure your SSH servers to use them.
You can find here how to generate the file /etc/ssh/ca.pem.
Modify the file /etc/ssh/sshd_config with the following parameters
... # Allow root to connect PermitRootLogin yes # Copy Vault SSH CA TrustedUserCAKeys /etc/ssh/ca.pem # Permit user principals AuthorizedPrincipalsFile /etc/ssh/authorized_principals/%u # Deny non signed key files AuthorizedKeysFile /dev/null # Deny password authentication PasswordAuthentication no .</description>
    </item>
    
    <item>
      <title>Signer</title>
      <link>https://signmykey.io/backends/signer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://signmykey.io/backends/signer/</guid>
      <description>Local Example Usage signerType: local signerOpts: caCert: /etc/signmykey/ca.pub caKey: /etc/signmykey/ca ttl: 300 extensions: permit-pty: &amp;quot;&amp;quot;  Options  caCert - Path to CA public key (required) caKey - Path to CA private key (required) ttl - TTL in seconds for signed certificates (required) criticalOptions - Map of critical options for signed certificates (optional) (default: empty) extensions - Map of extensions for signed certificates (optional) (default: permit-X11-forwarding, permit-agent-forwarding, permit-port-forwarding, permit-pty, permit-user-rc)  Vault (Hashicorp) Example Usage signerType: vault signerOpts: vaultAddr: 127.</description>
    </item>
    
    <item>
      <title>Signmykey</title>
      <link>https://signmykey.io/getting-started/signmykey/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://signmykey.io/getting-started/signmykey/</guid>
      <description>Installation On Ubuntu 16.04+, add signmykey repository and key:
echo &amp;quot;deb https://apt.signmykey.io/ stable main&amp;quot; &amp;gt; /etc/apt/sources.list.d/signmykey.list curl https://gpg.signmykey.io/signmykey.pub | apt-key add -  Then
useradd --no-create-home -s /bin/false signmykey apt update &amp;amp;&amp;amp; apt install signmykey wget https://raw.githubusercontent.com/signmykeyio/signmykey/master/signmykey.service -O /etc/systemd/system/signmykey.service systemctl enable signmykey.service  mkdir -m 700 /etc/signmykey  Server certificate Generate a certificate for signmykey server using Vault PKI
Note: you can use another certificate provider
vault write pki/issue/allow-all-domains common_name=&amp;quot;signmykeyserver&amp;quot; alt_names=&amp;quot;localhost&amp;quot; ip_sans=&amp;quot;127.</description>
    </item>
    
    <item>
      <title>Vault</title>
      <link>https://signmykey.io/getting-started/vault/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://signmykey.io/getting-started/vault/</guid>
      <description>Before you can use Signmykey, you must configure your Vault server to allow its usage.
Enable ssh First, enable the ssh secret engine to sign keys.
vault secrets enable ssh  Enable CA Generate CA for ssh.
vault write -f ssh/config/ca Key Value --- ----- public_key ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCwjLDgrISTB9no8Y4KE+1A7nvue1hfodlhC88jeXLbmop+mbvsG237FAs1TACHRxmyMfeM1b7N6FmLgisnf0Btk8tGPvikNcbHMf4kq7FwV2WeoSgHvtXex/dalrAnLbumthJUtYxY8dFticpxBp4guicretGbQ5LjVpOAPW8PhifrmoUgGUJ44eWET1Yg6sEiV4ZXv3nlXb7YFTJSaP3StJ4rCTFwCZA2NBV2ecBGee28+MtRx+bERecMic4GeXHXRhtHhf0gf8PaO7ePQ5pXPC1dxLG/GHAhwl04JUfc49NsWPavVuY5jUNFqfMZ4r0rN/TLl3XDyLkPPOGINkyoUoAW1Ji6DScnahYFA4i6oxQ0g3He5DWd71i6jm/3jodZ2lJjZyO8m89ceGr+f3Gwl8KVP2FQ+//psMADEcROJbK0v8YpSzJxM4tO7nsQ+FDKCbXGHAfdqwPS3TdI2AtU40FDEyf+cb41FtDCALBNdf4OoPg3gp9K2TVYvLG0iiz/1Poupqcnip04icvxFaTIAd8yzQa+9d3qzv7g6WxDpvcE04Z5VI/Lzw2wNXXOM/TdAm9YJco1vMrlJQAb8evstpSSSriMlQfeJUKFOKldgLF0cMLhgQFi5vF2R6t517N6rzy3Nxm4vKB/BomX8+iO9jXwscFSCDJt1HduXAtaQQ==  Export CA public key vault read -field=public_key ssh/config/ca &amp;gt; /etc/ssh/ca.pem  This certificate will be used on ssh servers, so keep it to copy its content later.</description>
    </item>
    
    <item>
      <title>Vault PKI</title>
      <link>https://signmykey.io/howtos/vaultpki/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://signmykey.io/howtos/vaultpki/</guid>
      <description>This HOWTO describe how to configure a Vault server with a PKI to sign its own certificate.
Installation Download apt install unzip VAULTVERSION=1.1.3 cd /tmp wget https://releases.hashicorp.com/vault/${VAULTVERSION}/vault_${VAULTVERSION}_linux_amd64.zip unzip vault_${VAULTVERSION}_linux_amd64.zip &amp;amp;&amp;amp; rm vault_${VAULTVERSION}_linux_amd64.zip sudo mv vault /usr/local/bin/vault  User and directories useradd --no-create-home -s /bin/false vault mkdir -m 700 /etc/vault /var/lib/vault chown vault: /etc/vault /var/lib/vault  Configuration Config file /etc/vault/vault.conf
backend &amp;quot;file&amp;quot; { path = &amp;quot;/var/lib/vault&amp;quot; } listener &amp;quot;tcp&amp;quot; { address = &amp;quot;0.</description>
    </item>
    
  </channel>
</rss>